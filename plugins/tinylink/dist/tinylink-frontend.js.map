{"version":3,"sources":["webpack://theia_tinylink/webpack/bootstrap","webpack://theia_tinylink/./src/tinylink-frontend.ts","webpack://theia_tinylink/external \"theia.theia_tinylink\""],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","IoTCommands","IoTURL","IoTWebview","theia","TINYLINK_COMPILE","id","category","label","TINYSIM_COMPILE","ONELINK_COMPILE","TINYLINK_LOCAL","TINYSIM","ONELINK","getQueryParameterString","parameters","env","getQueryParameters","parametersList","push","join","generateHTML","url","onDidReceiveMessage","panel","data","type","content","window","showOpenDialog","defaultUri","Uri","parse","then","val","length","showErrorMessage","webview","postMessage","from","path","start","context","_this","this","subscriptions","commands","registerCommand","args","_i","arguments","createWebviewPanel","ViewColumn","Active","html","stop","theia_tinylink"],"mappings":"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","file":"tinylink-frontend.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/**\n * Generated using theia-plugin-generator\n */\n\nimport * as theia from \"@theia/plugin\";\n\nnamespace IoTCommands {\n    const IOT_CATEGORY = \"IoT Plugin\";\n\n    export const TINYLINK_COMPILE = {\n        id: \"iot.plugin.tinylink.compile\",\n        category: IOT_CATEGORY,\n        label: \"TinyLink Compile\"\n    };\n\n    export const TINYSIM_COMPILE = {\n        id: \"iot.plugin.tinysim.compile\",\n        category: IOT_CATEGORY,\n        label: \"TinySim Compile\"\n    };\n\n    export const ONELINK_COMPILE = {\n        id: \"iot.plugin.onelink.compile\",\n        category: IOT_CATEGORY,\n        label: \"OneLink Compile\"\n    };\n}\n\nnamespace IoTURL {\n    export const TINYLINK_LOCAL =\n        \"http://tinylink.daixinye.com/webview/tinylink/localcompile\";\n    export const TINYSIM =\n        \"http://tinylink.daixinye.com/webview/tinysim\"\n    export const ONELINK = \n        \"http://tinylink.daixinye.com/webview/onelink\"\n\n    export function getQueryParameterString() {\n        const parameters = theia.env.getQueryParameters() || {};\n        const parametersList = [];\n        for (let key in parameters) {\n            parametersList.push(`${key}=${parameters[key]}`);\n        }\n        return parametersList.join(\"&\");\n    }\n}\n\nnamespace IoTWebview {\n    export function generateHTML(url: string) {\n        return `\n                        <script>\n                            window.addEventListener(\"message\",function(e){\n                                var data = e.data.data\n                                var from = e.data.from\n                                switch(from){\n                                    case 'webide':\n                                        document.getElementById('iframe').contentWindow.postMessage({\n                                            from: 'webview',\n                                            data: data\n                                        },'*')\n                                        break\n                                    case 'iframe':\n                                        window.postMessageExt(data)\n                                        break\n                                }\n                            },false)\n                        </script>\n                        <iframe id=\"iframe\" src=\"${url}\" frameborder=\"0\" style=\"display: block; margin: 0px; overflow: hidden; position: absolute; width: 100%; height: 100%; visibility: visible;\" sandbox=\"allow-same-origin allow-scripts allow-forms\"></iframe>\n                        `;\n    }\n\n    export function onDidReceiveMessage(panel: theia.WebviewPanel) {\n        return function(data: any) {\n            if (data && data.type === \"command\") {\n                switch (data.content) {\n                    case \"open_file_picker\":\n                        theia.window\n                            .showOpenDialog({\n                                defaultUri: theia.Uri.parse(\"/home/project\")\n                            })\n                            .then((val: any) => {\n                                if (!val || !val.length) {\n                                    return theia.window.showErrorMessage(\"没有选择文件\");\n                                }\n                                panel.webview.postMessage({\n                                    from: \"webide\",\n                                    data: {\n                                        path: val[0].path\n                                    }\n                                });\n                            });\n                        break;\n                    default:\n                }\n            }\n        }\n\n    }\n}\n\nexport function start(context: theia.PluginContext) {\n    context.subscriptions.push(\n        theia.commands.registerCommand(\n            IoTCommands.TINYLINK_COMPILE,\n            async (...args: any[]) => {\n                const panel = theia.window.createWebviewPanel(\n                    \"TinyLink\",\n                    \"TinyLink\",\n                    theia.ViewColumn.Active\n                );\n                panel.webview.html = IoTWebview.generateHTML(\n                    IoTURL.TINYLINK_LOCAL + \"?\" + IoTURL.getQueryParameterString()\n                );\n                panel.webview.onDidReceiveMessage(IoTWebview.onDidReceiveMessage(panel));\n            }\n        )\n    );\n\n    context.subscriptions.push(\n        theia.commands.registerCommand(\n            IoTCommands.TINYSIM_COMPILE,\n            async (...args: any[]) => {\n                const panel = theia.window.createWebviewPanel(\n                    \"TinySim\",\n                    \"TinySim\",\n                    theia.ViewColumn.Active\n                );\n                panel.webview.html = IoTWebview.generateHTML(\n                    IoTURL.TINYSIM + \"?\" + IoTURL.getQueryParameterString()\n                );\n                panel.webview.onDidReceiveMessage(IoTWebview.onDidReceiveMessage(panel));\n            }\n        )\n    );\n\n    context.subscriptions.push(\n        theia.commands.registerCommand(\n            IoTCommands.ONELINK_COMPILE,\n            async (...args: any[]) => {\n                const panel = theia.window.createWebviewPanel(\n                    \"OneLink\",\n                    \"OneLink\",\n                    theia.ViewColumn.Active\n                );\n                panel.webview.html = IoTWebview.generateHTML(\n                    IoTURL.ONELINK + \"?\" + IoTURL.getQueryParameterString()\n                );\n                panel.webview.onDidReceiveMessage(IoTWebview.onDidReceiveMessage(panel));\n            }\n        )\n    );\n}\n\nexport function stop() { }\n","module.exports = theia.theia_tinylink;"],"sourceRoot":""}